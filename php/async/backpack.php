<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\backpack as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\NotSupported;
use \React\Async;
use \React\Promise\PromiseInterface;

class backpack extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'backpack',
            'name' => 'Backpack',
            'countries' => array( 'KY' ), // Cayman Islands
            'version' => 'v1',
            'rateLimit' => 50,
            'certified' => false,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => true,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDeposits' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://backpack.exchange/logo.png',
                'api' => array(
                    'public' => 'https://api.backpack.exchange/api/v1',
                    'private' => 'https://api.backpack.exchange/api/v1',
                ),
                'www' => 'https://backpack.exchange',
                'doc' => 'https://docs.backpack.exchange',
                'fees' => 'https://backpack.exchange/fees',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'status' => 1,
                        'time' => 1,
                        'assets' => 1,
                        'markets' => 1,
                        'market' => 1,
                        'depth' => 1,
                        'trades' => 1,
                        'trades/history' => 1,
                        'ticker' => 1,
                        'tickers' => 1,
                        'klines' => 1,
                        'openInterest' => 1,
                        'wallets' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account' => 1,
                        'balances' => 1,
                        'depositAddress' => 1,
                        'orders' => 1,
                        'orders/history' => 1,
                        'order' => 1,
                        'fills' => 1,
                        'positions' => 1,
                        'capital/deposits' => 1,
                        'capital/withdrawals' => 1,
                        'capital/deposit-address' => 1,
                    ),
                    'post' => array(
                        'orders/execute' => 1,
                        'orders' => 1,  // batch orders
                        'capital/withdraw' => 1,
                        'capital/dust/convert' => 1,
                    ),
                    'put' => array(
                        'account' => 1,
                        'orders/{orderId}' => 1,
                    ),
                    'delete' => array(
                        'orders/{orderId}' => 1,
                        'orders' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.0002,
                    'taker' => 0.0005,
                ),
            ),
            'exceptions' => array(
                'exact' => array(
                    'INSUFFICIENT_BALANCE' => '\\ccxt\\InsufficientFunds',
                    'ORDER_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'INVALID_API_KEY' => '\\ccxt\\AuthenticationError',
                    'INVALID_SIGNATURE' => '\\ccxt\\AuthenticationError',
                    'RATE_LIMIT_EXCEEDED' => '\\ccxt\\RateLimitExceeded',
                    'INVALID_ORDER' => '\\ccxt\\InvalidOrder',
                    'INVALID_SYMBOL' => '\\ccxt\\BadSymbol',
                    'INVALID_TIMESTAMP' => '\\ccxt\\InvalidNonce',
                    'UNAUTHORIZED' => '\\ccxt\\PermissionDenied',
                    'ACCOUNT_SUSPENDED' => '\\ccxt\\AccountSuspended',
                    'SERVICE_UNAVAILABLE' => '\\ccxt\\OnMaintenance',
                    'MARKET_NOT_FOUND' => '\\ccxt\\BadSymbol',
                ),
                'broad' => array(
                    'Invalid' => '\\ccxt\\BadRequest',
                    'Unauthorized' => '\\ccxt\\AuthenticationError',
                    'Insufficient' => '\\ccxt\\InsufficientFunds',
                    'Not found' => '\\ccxt\\OrderNotFound',
                    'Rate limit' => '\\ccxt\\RateLimitExceeded',
                    'Suspended' => '\\ccxt\\AccountSuspended',
                ),
            ),
            'options' => array(
                'defaultType' => 'spot', // spot, futures
                'recvWindow' => 5000,
                'signTimestamp' => true,
                'instructionTypes' => array(
                    // Map endpoints to instruction types
                    'GET:account' => 'accountQuery',
                    'GET:balances' => 'balanceQuery',
                    'GET:orders' => 'orderQueryAll',
                    'GET:orders/history' => 'orderHistoryQueryAll',
                    'GET:order' => 'orderQuery',
                    'GET:fills' => 'fillHistoryQueryAll',
                    'GET:positions' => 'positionQuery',
                    'GET:capital/deposits' => 'depositQueryAll',
                    'GET:capital/withdrawals' => 'withdrawalQueryAll',
                    'GET:capital/deposit-address' => 'depositAddressQuery',
                    'POST:orders/execute' => 'orderExecute',
                    'POST:orders' => 'orderExecute', // batch
                    'POST:capital/withdraw' => 'withdraw',
                    'DELETE:orders/{orderId}' => 'orderCancel',
                    'DELETE:orders' => 'orderCancelAll',
                ),
            ),
        ));
    }

    public function fetch_time($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->publicGetTime ($params));
            //
            //     1700000000000
            //
            // The API returns a plain timestamp string/number, not an object
            if ((is_float($response) || is_int($response)) || gettype($response) === 'string') {
                return intval(string) ($response);
            }
            return $this->safe_integer($response, 'serverTime');
        }) ();
    }

    public function fetch_status($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches the current exchange $status
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a $status object
             */
            $response = Async\await($this->publicGetStatus ($params));
            //
            //     {
            //         "status" => "ok",
            //         "message" => "System operational"
            //     }
            //
            $status = $this->safe_string($response, 'status');
            return array(
                'status' => ($status === 'ok') ? 'ok' : 'maintenance',
                'updated' => null,
                'eta' => null,
                'url' => null,
                'info' => $response,
            );
        }) ();
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for backpack
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $response = Async\await($this->publicGetMarkets ($params));
            //
            //     array(
            //         array(
            //             "symbol" => "SOL_USDC",
            //             "baseSymbol" => "SOL",
            //             "quoteSymbol" => "USDC",
            //             "marketType" => "Spot",
            //             "baseDecimals" => 9,
            //             "quoteDecimals" => 6,
            //             "minOrderSize" => "0.01",
            //             "maxOrderSize" => "100000",
            //             "minNotional" => "1",
            //             "makerFee" => "0.0002",
            //             "takerFee" => "0.0005",
            //             "tickSize" => "0.01",
            //             "stepSize" => "0.01"
            //         ),
            //     )
            //
            return $this->parse_markets($response);
        }) ();
    }

    public function parse_market(array $market, ?array $currency = null): array {
        //
        //     {
        //         "symbol" => "SOL_USDC",
        //         "baseSymbol" => "SOL",
        //         "quoteSymbol" => "USDC",
        //         "marketType" => "Spot",
        //         "baseDecimals" => 9,
        //         "quoteDecimals" => 6,
        //         "minOrderSize" => "0.01",
        //         "maxOrderSize" => "100000",
        //         "minNotional" => "1",
        //         "makerFee" => "0.0002",
        //         "takerFee" => "0.0005",
        //         "tickSize" => "0.01",
        //         "stepSize" => "0.01",
        //         "contractSize" => "1",           // $futures only
        //         "openInterestLimit" => "1000000", // $futures only
        //     }
        //
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseSymbol');
        $quoteId = $this->safe_string($market, 'quoteSymbol');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $marketType = $this->safe_string($market, 'marketType');
        $spot = ($marketType === 'Spot');
        $futures = ($marketType === 'Futures');
        $symbol = $base . '/' . $quote . ($futures ? ':' . $quote : '');
        $maker = $this->safe_number($market, 'makerFee');
        $taker = $this->safe_number($market, 'takerFee');
        return $this->safe_market_structure(array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'active' => true,
            'type' => $spot ? 'spot' : 'swap',
            'spot' => $spot,
            'margin' => false,
            'future' => false,
            'swap' => $futures,
            'option' => false,
            'contract' => $futures,
            'settle' => $futures ? $quote : null,
            'settleId' => $futures ? $quoteId : null,
            'contractSize' => $futures ? $this->safe_number($market, 'contractSize', 1) : null,
            'linear' => $futures,
            'inverse' => false,
            'taker' => $taker,
            'maker' => $maker,
            'percentage' => true,
            'tierBased' => false,
            'feeSide' => 'quote',
            'precision' => array(
                'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'stepSize'))),
                'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'tickSize'))),
            ),
            'limits' => array(
                'amount' => array(
                    'min' => $this->safe_number($market, 'minOrderSize'),
                    'max' => $this->safe_number($market, 'maxOrderSize'),
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $this->safe_number($market, 'minNotional'),
                    'max' => null,
                ),
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        ));
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetTicker ($this->extend($request, $params)));
            //
            //     {
            //         "symbol" => "SOL_USDC",
            //         "lastPrice" => "100.50",
            //         "bidPrice" => "100.45",
            //         "askPrice" => "100.55",
            //         "volume" => "50000",
            //         "quoteVolume" => "5025000",
            //         "high" => "105.00",
            //         "low" => "98.00",
            //         "firstPrice" => "99.00",
            //         "priceChange" => "1.50",
            //         "priceChangePercent" => "1.515",
            //         "timestamp" => 1700000000000
            //     }
            //
            return $this->parse_ticker($response, $market);
        }) ();
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        //
        //     {
        //         "symbol" => "SOL_USDC",
        //         "lastPrice" => "100.50",
        //         "bidPrice" => "100.45",
        //         "askPrice" => "100.55",
        //         "volume" => "50000",
        //         "quoteVolume" => "5025000",
        //         "high" => "105.00",
        //         "low" => "98.00",
        //         "firstPrice" => "99.00",
        //         "priceChange" => "1.50",
        //         "priceChangePercent" => "1.515",
        //         "timestamp" => 1700000000000
        //     }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $last = $this->safe_string($ticker, 'lastPrice');
        $open = $this->safe_string($ticker, 'firstPrice');
        return $this->safe_ticker(array(
            'symbol' => $this->safe_symbol($marketId, $market),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'bidPrice'),
            'bidVolume' => $this->safe_string($ticker, 'bidSize'),
            'ask' => $this->safe_string($ticker, 'askPrice'),
            'askVolume' => $this->safe_string($ticker, 'askSize'),
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $this->safe_string($ticker, 'priceChange'),
            'percentage' => $this->safe_string($ticker, 'priceChangePercent'),
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'volume'),
            'quoteVolume' => $this->safe_string($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['depth'] = $limit;
            }
            $response = Async\await($this->publicGetDepth ($this->extend($request, $params)));
            //
            //     {
            //         "symbol" => "SOL_USDC",
            //         "bids" => [
            //             ["100.45", "50.5"],
            //             ["100.44", "100.2"],
            //         ],
            //         "asks" => [
            //             ["100.55", "45.2"],
            //             ["100.56", "90.5"],
            //         ],
            //         "lastUpdateId" => "111063070525358080",
            //         "timestamp" => 1700000000000
            //     }
            //
            $timestamp = $this->safe_integer($response, 'timestamp');
            return $this->parse_order_book($response, $market['symbol'], $timestamp, 'bids', 'asks');
        }) ();
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->publicGetTrades ($this->extend($request, $params)));
            //
            //     array(
            //         array(
            //             "id" => "12345",
            //             "price" => "100.50",
            //             "quantity" => "1.5",
            //             "quoteQuantity" => "150.75",
            //             "timestamp" => 1700000000000,
            //             "side" => "Buy",
            //             "isBuyerMaker" => false
            //         ),
            //     )
            //
            return $this->parse_trades($response, $market, $since, $limit);
        }) ();
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        //
        //     {
        //         "id" => "12345",
        //         "price" => "100.50",
        //         "quantity" => "1.5",
        //         "quoteQuantity" => "150.75",
        //         "timestamp" => 1700000000000,
        //         "side" => "Buy",
        //         "isBuyerMaker" => false
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $timestamp = $this->safe_integer($trade, 'timestamp');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'quantity');
        $costString = $this->safe_string($trade, 'quoteQuantity');
        $sideString = $this->safe_string($trade, 'side');
        $side = ($sideString === 'Buy') ? 'buy' : 'sell';
        $isBuyerMaker = $this->safe_value($trade, 'isBuyerMaker');
        $takerOrMaker = null;
        if ($isBuyerMaker !== null) {
            $takerOrMaker = $isBuyerMaker ? 'maker' : 'taker';
        }
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $this->safe_symbol(null, $market),
            'order' => $this->safe_string($trade, 'orderId'),
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => null,
        ), $market);
    }

    public function sign(string $path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $timestamp = $this->milliseconds();
            $windowString = $this->safe_string($this->options, 'recvWindow', '5000');
            $window = intval($windowString);
            // Get $instruction type for this endpoint
            $instruction = $this->get_instruction_type($path, $method);
            $queryString = '';
            if ($method === 'GET' || $method === 'DELETE') {
                if ($query) {
                    // Sort parameters alphabetically
                    $sortedQuery = $this->keysort($query);
                    $queryString = $this->urlencode($sortedQuery);
                    $url .= '?' . $queryString;
                }
            } else {
                if ($query) {
                    // Sort parameters alphabetically
                    $sortedQuery = $this->keysort($query);
                    $queryString = $this->urlencode($sortedQuery);
                    $body = $this->json($query);
                }
            }
            // Build $signature payload
            $signaturePayload = 'instruction=' . $instruction;
            if ($queryString) {
                $signaturePayload .= '&' . $queryString;
            }
            $signaturePayload .= '&$timestamp=' . (string) $timestamp;
            $signaturePayload .= '&$window=' . (string) $window;
            // Sign with ED25519
            $signature = $this->sign_message_with_ed25519($signaturePayload);
            $headers = array(
                'X-Timestamp' => (string) $timestamp,
                'X-Window' => (string) $window,
                'X-API-Key' => $this->apiKey,
                'X-Signature' => $signature,
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function sign_message_with_ed25519(string $message): string {
        // Convert $message to bytes
        $messageBytes = $this->encode($message);
        // Decode base64 private key to bytes
        $privateKeyBytes = base64_decode($this->secret);
        // Sign the $message
        $signature = ed25519.sign ($messageBytes, $privateKeyBytes);
        // Convert $signature to base64
        return $this->binary_to_base64($signature);
    }

    public function get_instruction_type(string $path, string $method): string {
        // Remove $path parameters (e.g., {orderId})
        $cleanPath = str_replace(/array([^, $path)]+}/g, '{orderId}');
        $key = $method . ':' . $cleanPath;
        $instructionTypes = $this->safe_value($this->options, 'instructionTypes', array());
        $instruction = $this->safe_string($instructionTypes, $key);
        if ($instruction === null) {
            throw new NotSupported($this->id . ' ' . $key . ' is not supported yet');
        }
        return $instruction;
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        //
        //     {
        //         "error" => "INVALID_API_KEY",
        //         "message" => "Invalid API key"
        //     }
        //
        $error = $this->safe_string($response, 'error');
        $message = $this->safe_string($response, 'message');
        if ($error !== null) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $error, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetBalances ($params));
            //
            //     array(
            //         array(
            //             "symbol" => "SOL",
            //             "total" => "100.5",
            //             "available" => "90.5",
            //             "locked" => "10.0",
            //             "staked" => "0"
            //         ),
            //     )
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function parse_balance($response): array {
        $result = array(
            'info' => $response,
        );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'symbol');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'locked');
            $account['total'] = $this->safe_string($balance, 'total');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fulfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'side' => ($side === 'buy') ? 'Bid' : 'Ask',
                'orderType' => ($type === 'market') ? 'Market' : 'Limit',
                'quantity' => $this->amount_to_precision($symbol, $amount),
            );
            if ($type === 'limit') {
                if ($price === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() requires a $price argument for limit orders');
                }
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $postOnly = $this->safe_bool($params, 'postOnly', false);
            if ($postOnly) {
                $request['postOnly'] = true;
            }
            $timeInForce = $this->safe_string($params, 'timeInForce', 'GTC');
            $request['timeInForce'] = $timeInForce;
            $response = Async\await($this->privatePostOrdersExecute ($this->extend($request, $params)));
            //
            //     {
            //         "id" => "111063070525358080",
            //         "clientId" => "client123",
            //         "symbol" => "SOL_USDC",
            //         "side" => "Bid",
            //         "orderType" => "Limit",
            //         "timeInForce" => "GTC",
            //         "price" => "100",
            //         "quantity" => "1",
            //         "executedQuantity" => "0",
            //         "executedQuoteQuantity" => "0",
            //         "status" => "New",
            //         "createdAt" => 1700000000000,
            //         "updatedAt" => 1700000000000,
            //         "selfTradePrevention" => "RejectTaker",
            //         "postOnly" => false
            //     }
            //
            return $this->parse_order($response, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'orderId' => $id,
                'symbol' => $market['id'],
            );
            $response = Async\await($this->privateDeleteOrdersOrderId ($this->extend($request, $params)));
            return $this->parse_order($response, $market);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetOrders ($this->extend($request, $params)));
            //
            //     array(
            //         {
            //             "id" => "111063070525358080",
            //             "clientId" => "client123",
            //             "symbol" => "SOL_USDC",
            //             "side" => "Bid",
            //             "orderType" => "Limit",
            //             "timeInForce" => "GTC",
            //             "price" => "100",
            //             "quantity" => "1",
            //             "executedQuantity" => "0",
            //             "executedQuoteQuantity" => "0",
            //             "status" => "New",
            //             "createdAt" => 1700000000000,
            //             "updatedAt" => 1700000000000
            //         }
            //     )
            //
            return $this->parse_orders($response, $market, $since, $limit);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['from'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetFills ($this->extend($request, $params)));
            //
            //     array(
            //         {
            //             "id" => "567",
            //             "orderId" => "111063070525358080",
            //             "symbol" => "SOL_USDC",
            //             "side" => "Bid",
            //             "price" => "100.45",
            //             "quantity" => "0.5",
            //             "quoteQuantity" => "50.225",
            //             "fee" => "0.025",
            //             "feeSymbol" => "USDC",
            //             "liquidity" => "TAKER",
            //             "timestamp" => 1700000005000
            //         }
            //     )
            //
            return $this->parse_my_trades($response, $market, $since, $limit);
        }) ();
    }

    public function parse_my_trade(array $trade, ?array $market = null): array {
        //
        //     {
        //         "id" => "567",
        //         "orderId" => "111063070525358080",
        //         "symbol" => "SOL_USDC",
        //         "side" => "Bid",
        //         "price" => "100.45",
        //         "quantity" => "0.5",
        //         "quoteQuantity" => "50.225",
        //         "fee" => "0.025",
        //         "feeSymbol" => "USDC",
        //         "liquidity" => "TAKER",
        //         "timestamp" => 1700000005000
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $orderId = $this->safe_string($trade, 'orderId');
        $timestamp = $this->safe_integer($trade, 'timestamp');
        $marketId = $this->safe_string($trade, 'symbol');
        $sideString = $this->safe_string($trade, 'side');
        $side = ($sideString === 'Bid') ? 'buy' : 'sell';
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'quantity');
        $costString = $this->safe_string($trade, 'quoteQuantity');
        $liquidity = $this->safe_string($trade, 'liquidity');
        $takerOrMaker = ($liquidity === 'MAKER') ? 'maker' : 'taker';
        $feeCostString = $this->safe_string($trade, 'fee');
        $feeCurrencyId = $this->safe_string($trade, 'feeSymbol');
        $feeCurrency = $this->safe_currency_code($feeCurrencyId);
        $fee = array(
            'cost' => $feeCostString,
            'currency' => $feeCurrency,
        );
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $this->safe_symbol($marketId, $market),
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function parse_my_trades(mixed $trades, ?array $market = null, ?int $since = null, ?int $limit = null): array {
        $result = array();
        for ($i = 0; $i < count($trades); $i++) {
            $result[] = $this->parse_my_trade($trades[$i], $market);
        }
        return $this->filter_by_since_limit($result, $since, $limit, 'timestamp');
    }

    public function parse_order(array $order, ?array $market = null): array {
        //
        //     {
        //         "id" => "111063070525358080",
        //         "clientId" => "client123",
        //         "symbol" => "SOL_USDC",
        //         "side" => "Bid",
        //         "orderType" => "Limit",
        //         "timeInForce" => "GTC",
        //         "price" => "100",
        //         "quantity" => "1",
        //         "executedQuantity" => "0",
        //         "executedQuoteQuantity" => "0",
        //         "status" => "New",
        //         "createdAt" => 1700000000000,
        //         "updatedAt" => 1700000000000,
        //         "selfTradePrevention" => "RejectTaker",
        //         "postOnly" => false
        //     }
        //
        $id = $this->safe_string($order, 'id');
        $clientOrderId = $this->safe_string($order, 'clientId');
        $timestamp = $this->safe_integer($order, 'createdAt');
        $lastUpdateTimestamp = $this->safe_integer($order, 'updatedAt');
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $type = $this->safe_string_lower($order, 'orderType');
        $sideString = $this->safe_string($order, 'side');
        $side = ($sideString === 'Bid') ? 'buy' : 'sell';
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'quantity');
        $filled = $this->safe_string($order, 'executedQuantity');
        $cost = $this->safe_string($order, 'executedQuoteQuantity');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $timeInForce = $this->safe_string($order, 'timeInForce');
        $postOnly = $this->safe_bool($order, 'postOnly');
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'lastUpdateTimestamp' => $lastUpdateTimestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'filled' => $filled,
            'remaining' => null,
            'average' => null,
            'fee' => null,
            'trades' => null,
            'info' => $order,
        ), $market);
    }

    public function parse_order_status(?string $status): string {
        $statuses = array(
            'New' => 'open',
            'PartiallyFilled' => 'open',
            'Filled' => 'closed',
            'Cancelled' => 'canceled',
            'PendingCancel' => 'canceling',
            'Rejected' => 'rejected',
            'Expired' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }
}

# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.backpack import ImplicitAPI
import numbers
from ccxt.base.types import Any, Balances, Currency, Int, Market, Num, Order, OrderBook, OrderSide, OrderType, Str, Ticker, Trade
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import AccountSuspended
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import NotSupported
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import OnMaintenance
from ccxt.base.errors import InvalidNonce


class backpack(Exchange, ImplicitAPI):

    def describe(self) -> Any:
        return self.deep_extend(super(backpack, self).describe(), {
            'id': 'backpack',
            'name': 'Backpack',
            'countries': ['KY'],  # Cayman Islands
            'version': 'v1',
            'rateLimit': 50,
            'certified': False,
            'pro': True,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': True,
                'future': True,
                'option': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'createOrder': True,
                'fetchBalance': True,
                'fetchClosedOrders': True,
                'fetchCurrencies': True,
                'fetchDepositAddress': False,
                'fetchDeposits': True,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchStatus': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': True,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchWithdrawals': True,
                'withdraw': True,
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '8h': '8h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://backpack.exchange/logo.png',
                'api': {
                    'public': 'https://api.backpack.exchange/api/v1',
                    'private': 'https://api.backpack.exchange/api/v1',
                },
                'www': 'https://backpack.exchange',
                'doc': 'https://docs.backpack.exchange',
                'fees': 'https://backpack.exchange/fees',
            },
            'api': {
                'public': {
                    'get': {
                        'status': 1,
                        'time': 1,
                        'assets': 1,
                        'markets': 1,
                        'market': 1,
                        'depth': 1,
                        'trades': 1,
                        'trades/history': 1,
                        'ticker': 1,
                        'tickers': 1,
                        'klines': 1,
                        'openInterest': 1,
                        'wallets': 1,
                    },
                },
                'private': {
                    'get': {
                        'account': 1,
                        'balances': 1,
                        'depositAddress': 1,
                        'orders': 1,
                        'orders/history': 1,
                        'order': 1,
                        'fills': 1,
                        'positions': 1,
                        'capital/deposits': 1,
                        'capital/withdrawals': 1,
                        'capital/deposit-address': 1,
                    },
                    'post': {
                        'orders/execute': 1,
                        'orders': 1,  # batch orders
                        'capital/withdraw': 1,
                        'capital/dust/convert': 1,
                    },
                    'put': {
                        'account': 1,
                        'orders/{orderId}': 1,
                    },
                    'delete': {
                        'orders/{orderId}': 1,
                        'orders': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'maker': 0.0002,
                    'taker': 0.0005,
                },
            },
            'exceptions': {
                'exact': {
                    'INSUFFICIENT_BALANCE': InsufficientFunds,
                    'ORDER_NOT_FOUND': OrderNotFound,
                    'INVALID_API_KEY': AuthenticationError,
                    'INVALID_SIGNATURE': AuthenticationError,
                    'RATE_LIMIT_EXCEEDED': RateLimitExceeded,
                    'INVALID_ORDER': InvalidOrder,
                    'INVALID_SYMBOL': BadSymbol,
                    'INVALID_TIMESTAMP': InvalidNonce,
                    'UNAUTHORIZED': PermissionDenied,
                    'ACCOUNT_SUSPENDED': AccountSuspended,
                    'SERVICE_UNAVAILABLE': OnMaintenance,
                    'MARKET_NOT_FOUND': BadSymbol,
                },
                'broad': {
                    'Invalid': BadRequest,
                    'Unauthorized': AuthenticationError,
                    'Insufficient': InsufficientFunds,
                    'Not found': OrderNotFound,
                    'Rate limit': RateLimitExceeded,
                    'Suspended': AccountSuspended,
                },
            },
            'options': {
                'defaultType': 'spot',  # spot, futures
                'recvWindow': 5000,
                'signTimestamp': True,
                'instructionTypes': {
                    # Map endpoints to instruction types
                    'GET:account': 'accountQuery',
                    'GET:balances': 'balanceQuery',
                    'GET:orders': 'orderQueryAll',
                    'GET:orders/history': 'orderHistoryQueryAll',
                    'GET:order': 'orderQuery',
                    'GET:fills': 'fillHistoryQueryAll',
                    'GET:positions': 'positionQuery',
                    'GET:capital/deposits': 'depositQueryAll',
                    'GET:capital/withdrawals': 'withdrawalQueryAll',
                    'GET:capital/deposit-address': 'depositAddressQuery',
                    'POST:orders/execute': 'orderExecute',
                    'POST:orders': 'orderExecute',  # batch
                    'POST:capital/withdraw': 'withdraw',
                    'DELETE:orders/{orderId}': 'orderCancel',
                    'DELETE:orders': 'orderCancelAll',
                },
            },
        })

    def fetch_time(self, params={}) -> float:
        """
        fetches the current integer timestamp in milliseconds from the exchange server
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int: the current integer timestamp in milliseconds from the exchange server
        """
        response = self.publicGetTime(params)
        #
        #     1700000000000
        #
        # The API returns a plain timestamp string/number, not an object
        if isinstance(response, numbers.Real) or isinstance(response, str):
            return str(int(response))
        return self.safe_integer(response, 'serverTime')

    def fetch_status(self, params={}) -> Any:
        """
        fetches the current exchange status
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a status object
        """
        response = self.publicGetStatus(params)
        #
        #     {
        #         "status": "ok",
        #         "message": "System operational"
        #     }
        #
        status = self.safe_string(response, 'status')
        return {
            'status': 'ok' if (status == 'ok') else 'maintenance',
            'updated': None,
            'eta': None,
            'url': None,
            'info': response,
        }

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for backpack
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        response = self.publicGetMarkets(params)
        #
        #     [
        #         {
        #             "symbol": "SOL_USDC",
        #             "baseSymbol": "SOL",
        #             "quoteSymbol": "USDC",
        #             "marketType": "Spot",
        #             "baseDecimals": 9,
        #             "quoteDecimals": 6,
        #             "minOrderSize": "0.01",
        #             "maxOrderSize": "100000",
        #             "minNotional": "1",
        #             "makerFee": "0.0002",
        #             "takerFee": "0.0005",
        #             "tickSize": "0.01",
        #             "stepSize": "0.01"
        #         },
        #     ]
        #
        return self.parse_markets(response)

    def parse_market(self, market: dict, currency: Currency = None) -> Market:
        #
        #     {
        #         "symbol": "SOL_USDC",
        #         "baseSymbol": "SOL",
        #         "quoteSymbol": "USDC",
        #         "marketType": "Spot",
        #         "baseDecimals": 9,
        #         "quoteDecimals": 6,
        #         "minOrderSize": "0.01",
        #         "maxOrderSize": "100000",
        #         "minNotional": "1",
        #         "makerFee": "0.0002",
        #         "takerFee": "0.0005",
        #         "tickSize": "0.01",
        #         "stepSize": "0.01",
        #         "contractSize": "1",           # futures only
        #         "openInterestLimit": "1000000",  # futures only
        #     }
        #
        id = self.safe_string(market, 'symbol')
        baseId = self.safe_string(market, 'baseSymbol')
        quoteId = self.safe_string(market, 'quoteSymbol')
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        marketType = self.safe_string(market, 'marketType')
        spot = (marketType == 'Spot')
        futures = (marketType == 'Futures')
        symbol = base + '/' + quote + (futures ? ':' + quote : '')
        maker = self.safe_number(market, 'makerFee')
        taker = self.safe_number(market, 'takerFee')
        return self.safe_market_structure({
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'baseId': baseId,
            'quoteId': quoteId,
            'active': True,
            'type': 'spot' if spot else 'swap',
            'spot': spot,
            'margin': False,
            'future': False,
            'swap': futures,
            'option': False,
            'contract': futures,
            'settle': quote if futures else None,
            'settleId': quoteId if futures else None,
            'contractSize': self.safe_number(market, 'contractSize', 1) if futures else None,
            'linear': futures,
            'inverse': False,
            'taker': taker,
            'maker': maker,
            'percentage': True,
            'tierBased': False,
            'feeSide': 'quote',
            'precision': {
                'amount': self.parse_number(self.parse_precision(self.safe_string(market, 'stepSize'))),
                'price': self.parse_number(self.parse_precision(self.safe_string(market, 'tickSize'))),
            },
            'limits': {
                'amount': {
                    'min': self.safe_number(market, 'minOrderSize'),
                    'max': self.safe_number(market, 'maxOrderSize'),
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': self.safe_number(market, 'minNotional'),
                    'max': None,
                },
                'leverage': {
                    'min': None,
                    'max': None,
                },
            },
            'created': None,
            'info': market,
        })

    def fetch_ticker(self, symbol: str, params={}) -> Ticker:
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.publicGetTicker(self.extend(request, params))
        #
        #     {
        #         "symbol": "SOL_USDC",
        #         "lastPrice": "100.50",
        #         "bidPrice": "100.45",
        #         "askPrice": "100.55",
        #         "volume": "50000",
        #         "quoteVolume": "5025000",
        #         "high": "105.00",
        #         "low": "98.00",
        #         "firstPrice": "99.00",
        #         "priceChange": "1.50",
        #         "priceChangePercent": "1.515",
        #         "timestamp": 1700000000000
        #     }
        #
        return self.parse_ticker(response, market)

    def parse_ticker(self, ticker: dict, market: Market = None) -> Ticker:
        #
        #     {
        #         "symbol": "SOL_USDC",
        #         "lastPrice": "100.50",
        #         "bidPrice": "100.45",
        #         "askPrice": "100.55",
        #         "volume": "50000",
        #         "quoteVolume": "5025000",
        #         "high": "105.00",
        #         "low": "98.00",
        #         "firstPrice": "99.00",
        #         "priceChange": "1.50",
        #         "priceChangePercent": "1.515",
        #         "timestamp": 1700000000000
        #     }
        #
        marketId = self.safe_string(ticker, 'symbol')
        timestamp = self.safe_integer(ticker, 'timestamp')
        last = self.safe_string(ticker, 'lastPrice')
        open = self.safe_string(ticker, 'firstPrice')
        return self.safe_ticker({
            'symbol': self.safe_symbol(marketId, market),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_string(ticker, 'high'),
            'low': self.safe_string(ticker, 'low'),
            'bid': self.safe_string(ticker, 'bidPrice'),
            'bidVolume': self.safe_string(ticker, 'bidSize'),
            'ask': self.safe_string(ticker, 'askPrice'),
            'askVolume': self.safe_string(ticker, 'askSize'),
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': self.safe_string(ticker, 'priceChange'),
            'percentage': self.safe_string(ticker, 'priceChangePercent'),
            'average': None,
            'baseVolume': self.safe_string(ticker, 'volume'),
            'quoteVolume': self.safe_string(ticker, 'quoteVolume'),
            'info': ticker,
        }, market)

    def fetch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['depth'] = limit
        response = self.publicGetDepth(self.extend(request, params))
        #
        #     {
        #         "symbol": "SOL_USDC",
        #         "bids": [
        #             ["100.45", "50.5"],
        #             ["100.44", "100.2"],
        #         ],
        #         "asks": [
        #             ["100.55", "45.2"],
        #             ["100.56", "90.5"],
        #         ],
        #         "lastUpdateId": "111063070525358080",
        #         "timestamp": 1700000000000
        #     }
        #
        timestamp = self.safe_integer(response, 'timestamp')
        return self.parse_order_book(response, market['symbol'], timestamp, 'bids', 'asks')

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetTrades(self.extend(request, params))
        #
        #     [
        #         {
        #             "id": "12345",
        #             "price": "100.50",
        #             "quantity": "1.5",
        #             "quoteQuantity": "150.75",
        #             "timestamp": 1700000000000,
        #             "side": "Buy",
        #             "isBuyerMaker": False
        #         },
        #     ]
        #
        return self.parse_trades(response, market, since, limit)

    def parse_trade(self, trade: dict, market: Market = None) -> Trade:
        #
        #     {
        #         "id": "12345",
        #         "price": "100.50",
        #         "quantity": "1.5",
        #         "quoteQuantity": "150.75",
        #         "timestamp": 1700000000000,
        #         "side": "Buy",
        #         "isBuyerMaker": False
        #     }
        #
        id = self.safe_string(trade, 'id')
        timestamp = self.safe_integer(trade, 'timestamp')
        priceString = self.safe_string(trade, 'price')
        amountString = self.safe_string(trade, 'quantity')
        costString = self.safe_string(trade, 'quoteQuantity')
        sideString = self.safe_string(trade, 'side')
        side = 'buy' if (sideString == 'Buy') else 'sell'
        isBuyerMaker = self.safe_value(trade, 'isBuyerMaker')
        takerOrMaker = None
        if isBuyerMaker is not None:
            takerOrMaker = 'maker' if isBuyerMaker else 'taker'
        return self.safe_trade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': self.safe_symbol(None, market),
            'order': self.safe_string(trade, 'orderId'),
            'type': None,
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': None,
        }, market)

    def sign(self, path: str, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'][api] + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            timestamp = self.milliseconds()
            windowString = self.safe_string(self.options, 'recvWindow', '5000')
            window = int(windowString)
            # Get instruction type for self endpoint
            instruction = self.get_instruction_type(path, method)
            queryString = ''
            if method == 'GET' or method == 'DELETE':
                if query:
                    # Sort parameters alphabetically
                    sortedQuery = self.keysort(query)
                    queryString = self.urlencode(sortedQuery)
                    url += '?' + queryString
            else:
                if query:
                    # Sort parameters alphabetically
                    sortedQuery = self.keysort(query)
                    queryString = self.urlencode(sortedQuery)
                    body = self.json(query)
            # Build signature payload
            signaturePayload = 'instruction=' + instruction
            if queryString:
                signaturePayload += '&' + queryString
            signaturePayload += '&timestamp=' + str(timestamp)
            signaturePayload += '&window=' + str(window)
            # Sign with ED25519
            signature = self.sign_message_with_ed25519(signaturePayload)
            headers = {
                'X-Timestamp': str(timestamp),
                'X-Window': str(window),
                'X-API-Key': self.apiKey,
                'X-Signature': signature,
                'Content-Type': 'application/json',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def sign_message_with_ed25519(self, message: str) -> str:
        # Convert message to bytes
        messageBytes = self.encode(message)
        # Decode base64 private key to bytes
        privateKeyBytes = self.base64_to_binary(self.secret)
        # Sign the message
        signature = ed25519.sign(messageBytes, privateKeyBytes)
        # Convert signature to base64
        return self.binary_to_base64(signature)

    def get_instruction_type(self, path: str, method: str) -> str:
        # Remove path parameters(e.g., {orderId})
        cleanPath = path.replace(/{[^}]+}/g, '{orderId}')
        key = method + ':' + cleanPath
        instructionTypes = self.safe_value(self.options, 'instructionTypes', {})
        instruction = self.safe_string(instructionTypes, key)
        if instruction is None:
            raise NotSupported(self.id + ' ' + key + ' is not supported yet')
        return instruction

    def handle_errors(self, code: int, reason: str, url: str, method: str, headers: dict, body: str, response, requestHeaders, requestBody):
        if response is None:
            return None
        #
        #     {
        #         "error": "INVALID_API_KEY",
        #         "message": "Invalid API key"
        #     }
        #
        error = self.safe_string(response, 'error')
        message = self.safe_string(response, 'message')
        if error is not None:
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], error, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)
        return None

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        self.load_markets()
        response = self.privateGetBalances(params)
        #
        #     [
        #         {
        #             "symbol": "SOL",
        #             "total": "100.5",
        #             "available": "90.5",
        #             "locked": "10.0",
        #             "staked": "0"
        #         },
        #     ]
        #
        return self.parse_balance(response)

    def parse_balance(self, response) -> Balances:
        result: dict = {
            'info': response,
        }
        for i in range(0, len(response)):
            balance = response[i]
            currencyId = self.safe_string(balance, 'symbol')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_string(balance, 'available')
            account['used'] = self.safe_string(balance, 'locked')
            account['total'] = self.safe_string(balance, 'total')
            result[code] = account
        return self.safe_balance(result)

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = None, params={}) -> Order:
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'side': 'Bid' if (side == 'buy') else 'Ask',
            'orderType': 'Market' if (type == 'market') else 'Limit',
            'quantity': self.amount_to_precision(symbol, amount),
        }
        if type == 'limit':
            if price is None:
                raise ArgumentsRequired(self.id + ' createOrder() requires a price argument for limit orders')
            request['price'] = self.price_to_precision(symbol, price)
        postOnly = self.safe_bool(params, 'postOnly', False)
        if postOnly:
            request['postOnly'] = True
        timeInForce = self.safe_string(params, 'timeInForce', 'GTC')
        request['timeInForce'] = timeInForce
        response = self.privatePostOrdersExecute(self.extend(request, params))
        #
        #     {
        #         "id": "111063070525358080",
        #         "clientId": "client123",
        #         "symbol": "SOL_USDC",
        #         "side": "Bid",
        #         "orderType": "Limit",
        #         "timeInForce": "GTC",
        #         "price": "100",
        #         "quantity": "1",
        #         "executedQuantity": "0",
        #         "executedQuoteQuantity": "0",
        #         "status": "New",
        #         "createdAt": 1700000000000,
        #         "updatedAt": 1700000000000,
        #         "selfTradePrevention": "RejectTaker",
        #         "postOnly": False
        #     }
        #
        return self.parse_order(response, market)

    def cancel_order(self, id: str, symbol: Str = None, params={}) -> Order:
        """
        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'orderId': id,
            'symbol': market['id'],
        }
        response = self.privateDeleteOrdersOrderId(self.extend(request, params))
        return self.parse_order(response, market)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch open orders for
        :param int [limit]: the maximum number of open orders structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request: dict = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if limit is not None:
            request['limit'] = limit
        response = self.privateGetOrders(self.extend(request, params))
        #
        #     [
        #         {
        #             "id": "111063070525358080",
        #             "clientId": "client123",
        #             "symbol": "SOL_USDC",
        #             "side": "Bid",
        #             "orderType": "Limit",
        #             "timeInForce": "GTC",
        #             "price": "100",
        #             "quantity": "1",
        #             "executedQuantity": "0",
        #             "executedQuoteQuantity": "0",
        #             "status": "New",
        #             "createdAt": 1700000000000,
        #             "updatedAt": 1700000000000
        #         }
        #     ]
        #
        return self.parse_orders(response, market, since, limit)

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        fetch all trades made by the user
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        self.load_markets()
        request: dict = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if since is not None:
            request['from'] = since
        if limit is not None:
            request['limit'] = limit
        response = self.privateGetFills(self.extend(request, params))
        #
        #     [
        #         {
        #             "id": "567",
        #             "orderId": "111063070525358080",
        #             "symbol": "SOL_USDC",
        #             "side": "Bid",
        #             "price": "100.45",
        #             "quantity": "0.5",
        #             "quoteQuantity": "50.225",
        #             "fee": "0.025",
        #             "feeSymbol": "USDC",
        #             "liquidity": "TAKER",
        #             "timestamp": 1700000005000
        #         }
        #     ]
        #
        return self.parse_my_trades(response, market, since, limit)

    def parse_my_trade(self, trade: dict, market: Market = None) -> Trade:
        #
        #     {
        #         "id": "567",
        #         "orderId": "111063070525358080",
        #         "symbol": "SOL_USDC",
        #         "side": "Bid",
        #         "price": "100.45",
        #         "quantity": "0.5",
        #         "quoteQuantity": "50.225",
        #         "fee": "0.025",
        #         "feeSymbol": "USDC",
        #         "liquidity": "TAKER",
        #         "timestamp": 1700000005000
        #     }
        #
        id = self.safe_string(trade, 'id')
        orderId = self.safe_string(trade, 'orderId')
        timestamp = self.safe_integer(trade, 'timestamp')
        marketId = self.safe_string(trade, 'symbol')
        sideString = self.safe_string(trade, 'side')
        side = 'buy' if (sideString == 'Bid') else 'sell'
        priceString = self.safe_string(trade, 'price')
        amountString = self.safe_string(trade, 'quantity')
        costString = self.safe_string(trade, 'quoteQuantity')
        liquidity = self.safe_string(trade, 'liquidity')
        takerOrMaker = 'maker' if (liquidity == 'MAKER') else 'taker'
        feeCostString = self.safe_string(trade, 'fee')
        feeCurrencyId = self.safe_string(trade, 'feeSymbol')
        feeCurrency = self.safe_currency_code(feeCurrencyId)
        fee = {
            'cost': feeCostString,
            'currency': feeCurrency,
        }
        return self.safe_trade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': self.safe_symbol(marketId, market),
            'order': orderId,
            'type': None,
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': fee,
        }, market)

    def parse_my_trades(self, trades: List[object], market: Market = None, since: Int = None, limit: Int = None) -> List[Trade]:
        result = []
        for i in range(0, len(trades)):
            result.append(self.parse_my_trade(trades[i], market))
        return self.filter_by_since_limit(result, since, limit, 'timestamp')

    def parse_order(self, order: dict, market: Market = None) -> Order:
        #
        #     {
        #         "id": "111063070525358080",
        #         "clientId": "client123",
        #         "symbol": "SOL_USDC",
        #         "side": "Bid",
        #         "orderType": "Limit",
        #         "timeInForce": "GTC",
        #         "price": "100",
        #         "quantity": "1",
        #         "executedQuantity": "0",
        #         "executedQuoteQuantity": "0",
        #         "status": "New",
        #         "createdAt": 1700000000000,
        #         "updatedAt": 1700000000000,
        #         "selfTradePrevention": "RejectTaker",
        #         "postOnly": False
        #     }
        #
        id = self.safe_string(order, 'id')
        clientOrderId = self.safe_string(order, 'clientId')
        timestamp = self.safe_integer(order, 'createdAt')
        lastUpdateTimestamp = self.safe_integer(order, 'updatedAt')
        marketId = self.safe_string(order, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        type = self.safe_string_lower(order, 'orderType')
        sideString = self.safe_string(order, 'side')
        side = 'buy' if (sideString == 'Bid') else 'sell'
        price = self.safe_string(order, 'price')
        amount = self.safe_string(order, 'quantity')
        filled = self.safe_string(order, 'executedQuantity')
        cost = self.safe_string(order, 'executedQuoteQuantity')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        timeInForce = self.safe_string(order, 'timeInForce')
        postOnly = self.safe_bool(order, 'postOnly')
        return self.safe_order({
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'lastUpdateTimestamp': lastUpdateTimestamp,
            'status': status,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'stopPrice': None,
            'triggerPrice': None,
            'amount': amount,
            'cost': cost,
            'filled': filled,
            'remaining': None,
            'average': None,
            'fee': None,
            'trades': None,
            'info': order,
        }, market)

    def parse_order_status(self, status: Str) -> str:
        statuses: dict = {
            'New': 'open',
            'PartiallyFilled': 'open',
            'Filled': 'closed',
            'Cancelled': 'canceled',
            'PendingCancel': 'canceling',
            'Rejected': 'rejected',
            'Expired': 'expired',
        }
        return self.safe_string(statuses, status, status)
